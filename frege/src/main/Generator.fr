module ch.fhnw.thga.Generator where

import ch.fhnw.thga.Coroutine (Coroutine, resume, suspend)

type Generator a m res = Coroutine ((,) a) m res

runGenerator :: Monad m => Generator a m res -> m ([a], res)
runGenerator = go id
  where
    go f gen = do
      eitherGen <- resume gen
      case eitherGen of
        (Left (x, newGen)) -> go (f . (++) [x]) newGen
        (Right x)  -> pure (f [], x)

yield :: Monad m => a -> Generator a m ()
yield a = suspend (a, pure ())

simpleGenerator :: Generator Int IO Int
simpleGenerator = do
  yield 1
  yield 2
  pure 3

main :: IO ()
main = do
  (xs, res) <- runGenerator simpleGenerator
  println $ show xs
  println $ "Result is: " ++ (show res)
  println "FIN"